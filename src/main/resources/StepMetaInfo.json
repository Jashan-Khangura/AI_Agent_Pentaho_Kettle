{
  "TableOutput": "Writes rows of data from a transformation into a database table. Commonly used for persisting processed or cleaned data. Supports batch inserts for performance optimization. Sample Payload: \"{\\\"stepName\\\":\\\"Test\\\",\\\"stepType\\\":\\\"TableOutput\\\",\\\"targetTable\\\":\\\"Employee\\\",\\\"batchSize\\\":1000,\\\"truncateTable\\\":false}\"\n",
  "CSVInput": "Reads data from a CSV file into the transformation pipeline. Supports defining delimiter and header presence. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"CSVInput\\\",\\\"filePath\\\":\\\"example.csv\\\",\\\"delimitter\\\":\\\",\\\",\\\"headerRowPresent\\\":true}\"\n",
  "TableInput": "Reads data from a database table using a SQL query. This step is commonly used as a source in transformation pipeline when extracting, filtering, and sorting data from relational database. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"TableInput\\\",\\\"query\\\":\\\"Select * from Employee where salary < 1000\\\",\\\"rowLimit\\\":\\\"100\\\"}\"\n",
  "SortRows": "Sorts input rows based on one or more fields. You need to specify ascending or descending order and caseSensitive for each mentioned field. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"SortRows\\\",\\\"fields\\\":[\\\"salary\\\", \\\"bonus\\\"], \\\"caseSensitive\\\":[true, true], \\\"ascending\\\":[true,false]}\"\n",
  "FilterRows": "Filters rows based on a condition. Routes rows that meet the condition to the true step and others to the false step. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"FilterRows\\\",\\\"filterCondition\\\":{\\\"field\\\":\\\"salary\\\",\\\"operator\\\":\\\"EQUAL/NOT_EQUAL/GREATER_THAN/GREATER_OR_EQUAL/LESS_THAN/LESS_OR_EQUAL/LIKE\\\",\\\"value\\\":\\\"bonus\\\"},\\\"isCompareWithField\\\":true,\\\"trueStep\\\":\\\"TestStep2\\\",\\\"falseStep\\\":\\\"TestStep3\\\"}\"\n",
  "Select": "Refines data by selecting only specified fields, or renaming them. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"Select\\\",\\\"selectFields\\\":[{\\\"fieldName\\\":\\\"id\\\"},{\\\"fieldName\\\":\\\"DateOfBirth\\\",\\\"renameField\\\":\\\"DOB\\\"}]}\"\n",
  "MergeJoin": "Performs a join operation between two sorted input streams based on specified key fields. Use it when you need to combine data from multiple sources in a single transformation. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"MergeJoin\\\",\\\"joinType\\\":\\\"INNER/LEFT_OUTER/RIGHT_OUTER/FULL_OUTER\\\",\\\"sourceFields\\\":[\\\"orderDate\\\",\\\"customerId\\\"],\\\"targetFields\\\":[\\\"creationDate\\\",\\\"customerId\\\"]}\"\n",
  "UDJC": "The UDJC step lets you add custom Java logic in transformations. Use Transform Class for row-level processing and Normal Class for helper functions or external integrations. Ideal for complex logic or custom operations not covered by standard steps. Sample Payload: \"{\\\"stepName\\\":\\\"TestStep\\\",\\\"stepType\\\":\\\"UDJC\\\",\\\"sourceCode\\\":\\\"System.out.println()\\\",\\\"classType\\\":\\\"transform\\\",\\\"className\\\":\\\"test\\\"}\"\n"
}